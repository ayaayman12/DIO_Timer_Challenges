
GPIO_REQ7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f2d  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000760  00000000  00000000  000014bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000641  00000000  00000000  00001c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ba  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cdc  00000000  00000000  0000286e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	15 01       	movw	r2, r10
  56:	1b 01       	movw	r2, r22
  58:	21 01       	movw	r4, r2
  5a:	27 01       	movw	r4, r14
  5c:	2d 01       	movw	r4, r26
  5e:	33 01       	movw	r6, r6
  60:	39 01       	movw	r6, r18
  62:	3f 01       	movw	r6, r30
  64:	45 01       	movw	r8, r10
  66:	4b 01       	movw	r8, r22
  68:	5c 01       	movw	r10, r24
  6a:	62 01       	movw	r12, r4
  6c:	68 01       	movw	r12, r16
  6e:	6e 01       	movw	r12, r28
  70:	74 01       	movw	r14, r8
  72:	7a 01       	movw	r14, r20
  74:	80 01       	movw	r16, r0
  76:	86 01       	movw	r16, r12
  78:	8c 01       	movw	r16, r24
  7a:	92 01       	movw	r18, r4

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  8c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <gpioPinDirection>:
/* This function determine the direction of a specific Pin or pins by ANDing the PORTx Direction with NOT Pins Mask if the Required Direction is INPUT */
/* and ORing the PORTx Direction with Pins Mask if the Required Direction is OUTPUT */

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	if( u8_direction == INPUT)
  94:	41 11       	cpse	r20, r1
  96:	1c c0       	rjmp	.+56     	; 0xd0 <gpioPinDirection+0x3c>
	{
		switch(u8_port)
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	59 f0       	breq	.+22     	; 0xb2 <gpioPinDirection+0x1e>
  9c:	28 f0       	brcs	.+10     	; 0xa8 <gpioPinDirection+0x14>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	69 f0       	breq	.+26     	; 0xbc <gpioPinDirection+0x28>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	81 f0       	breq	.+32     	; 0xc6 <gpioPinDirection+0x32>
  a6:	08 95       	ret
		{
			case GPIOA: PORTA_DIR &= ~(u8_pins);break;
  a8:	8a b3       	in	r24, 0x1a	; 26
  aa:	60 95       	com	r22
  ac:	68 23       	and	r22, r24
  ae:	6a bb       	out	0x1a, r22	; 26
  b0:	08 95       	ret
			case GPIOB: PORTB_DIR &= ~(u8_pins);break;
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	60 95       	com	r22
  b6:	68 23       	and	r22, r24
  b8:	67 bb       	out	0x17, r22	; 23
  ba:	08 95       	ret
			case GPIOC: PORTC_DIR &= ~(u8_pins);break;
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	60 95       	com	r22
  c0:	68 23       	and	r22, r24
  c2:	64 bb       	out	0x14, r22	; 20
  c4:	08 95       	ret
			case GPIOD: PORTD_DIR &= ~(u8_pins);break;
  c6:	81 b3       	in	r24, 0x11	; 17
  c8:	60 95       	com	r22
  ca:	68 23       	and	r22, r24
  cc:	61 bb       	out	0x11, r22	; 17
  ce:	08 95       	ret
			default: break;
		}
	}
	
	else if( u8_direction == OUTPUT)
  d0:	4f 3f       	cpi	r20, 0xFF	; 255
  d2:	b9 f4       	brne	.+46     	; 0x102 <gpioPinDirection+0x6e>
	{
		switch(u8_port)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	51 f0       	breq	.+20     	; 0xec <gpioPinDirection+0x58>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <gpioPinDirection+0x50>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	59 f0       	breq	.+22     	; 0xf4 <gpioPinDirection+0x60>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	69 f0       	breq	.+26     	; 0xfc <gpioPinDirection+0x68>
  e2:	08 95       	ret
		{
			case GPIOA: PORTA_DIR |= (u8_pins);break;
  e4:	8a b3       	in	r24, 0x1a	; 26
  e6:	68 2b       	or	r22, r24
  e8:	6a bb       	out	0x1a, r22	; 26
  ea:	08 95       	ret
			case GPIOB: PORTB_DIR |= (u8_pins);break;
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	68 2b       	or	r22, r24
  f0:	67 bb       	out	0x17, r22	; 23
  f2:	08 95       	ret
			case GPIOC: PORTC_DIR |= (u8_pins);break;
  f4:	84 b3       	in	r24, 0x14	; 20
  f6:	68 2b       	or	r22, r24
  f8:	64 bb       	out	0x14, r22	; 20
  fa:	08 95       	ret
			case GPIOD: PORTD_DIR |= (u8_pins);break;
  fc:	81 b3       	in	r24, 0x11	; 17
  fe:	68 2b       	or	r22, r24
 100:	61 bb       	out	0x11, r22	; 17
 102:	08 95       	ret

00000104 <gpioPinWrite>:
/* After that we make sure of the value by ANDing the Pin Mask with the desired value*/
/* Finally ORing PORTx DATA with the value*/
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	uint8_t temp_reg;
	switch(u8_port)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	71 f0       	breq	.+28     	; 0x124 <gpioPinWrite+0x20>
 108:	28 f0       	brcs	.+10     	; 0x114 <gpioPinWrite+0x10>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	99 f0       	breq	.+38     	; 0x134 <gpioPinWrite+0x30>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	c9 f0       	breq	.+50     	; 0x144 <gpioPinWrite+0x40>
 112:	08 95       	ret
	{
		case GPIOA:
		{
			 temp_reg = PORTA_DATA & ~(u8_pins);
 114:	8b b3       	in	r24, 0x1b	; 27
			 u8_value = (u8_pins & u8_value);
			 PORTA_DATA = temp_reg |u8_value ;
 116:	96 2f       	mov	r25, r22
 118:	90 95       	com	r25
 11a:	89 23       	and	r24, r25
 11c:	46 23       	and	r20, r22
 11e:	48 2b       	or	r20, r24
 120:	4b bb       	out	0x1b, r20	; 27
			 break;
 122:	08 95       	ret
		}
		case GPIOB:
		{ 
			temp_reg = PORTB_DATA & ~(u8_pins);
 124:	88 b3       	in	r24, 0x18	; 24
			u8_value = (u8_pins & u8_value);
			PORTB_DATA = temp_reg | ( u8_value);
 126:	96 2f       	mov	r25, r22
 128:	90 95       	com	r25
 12a:	89 23       	and	r24, r25
 12c:	46 23       	and	r20, r22
 12e:	48 2b       	or	r20, r24
 130:	48 bb       	out	0x18, r20	; 24
			break;
 132:	08 95       	ret
		}
		case GPIOC:
		{
			temp_reg = PORTC_DATA & ~(u8_pins);
 134:	85 b3       	in	r24, 0x15	; 21
			u8_value = (u8_pins & u8_value);
			PORTC_DATA = temp_reg | ( u8_value);
 136:	96 2f       	mov	r25, r22
 138:	90 95       	com	r25
 13a:	89 23       	and	r24, r25
 13c:	46 23       	and	r20, r22
 13e:	48 2b       	or	r20, r24
 140:	45 bb       	out	0x15, r20	; 21
			break;
 142:	08 95       	ret
		}
		case GPIOD:
		{
			temp_reg = PORTD_DATA & ~(u8_pins);
 144:	82 b3       	in	r24, 0x12	; 18
			u8_value =(u8_pins & u8_value);
			PORTD_DATA = temp_reg | (u8_value);
 146:	96 2f       	mov	r25, r22
 148:	90 95       	com	r25
 14a:	89 23       	and	r24, r25
 14c:	46 23       	and	r20, r22
 14e:	48 2b       	or	r20, r24
 150:	42 bb       	out	0x12, r20	; 18
 152:	08 95       	ret

00000154 <main>:
#include "sevenSeg.h"
#include "softwareDelay.h"

int main(void)
{
	 sevenSegInit(SEG_0);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 df 00 	call	0x1be	; 0x1be <sevenSegInit>
	 sevenSegInit(SEG_1);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 df 00 	call	0x1be	; 0x1be <sevenSegInit>
	 uint8_t i,j;
	 uint16_t z;
    /* Replace with your application code */
    while (1)
	 {
		  for(i=0;i<10;i++) 
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	2b c0       	rjmp	.+86     	; 0x1ba <main+0x66>
		  {
				for(j=0;j<10;j++) 
				{
					 for (z=0;z<5;z++)
					 {
						   sevenSegWrite(SEG_0,j);
 164:	61 2f       	mov	r22, r17
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 04 01 	call	0x208	; 0x208 <sevenSegWrite>
						   sevenSegEnable(SEG_0);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 98 01 	call	0x330	; 0x330 <sevenSegEnable>
						   SwDelay_ms(100);
 172:	64 e6       	ldi	r22, 0x64	; 100
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 ba 01 	call	0x374	; 0x374 <SwDelay_ms>
						   sevenSegDisable(SEG_0);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 a9 01 	call	0x352	; 0x352 <sevenSegDisable>
						   sevenSegWrite(SEG_1 ,i);
 184:	60 2f       	mov	r22, r16
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 04 01 	call	0x208	; 0x208 <sevenSegWrite>
						   sevenSegEnable(SEG_1);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 98 01 	call	0x330	; 0x330 <sevenSegEnable>
						   SwDelay_ms(100);
 192:	64 e6       	ldi	r22, 0x64	; 100
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 ba 01 	call	0x374	; 0x374 <SwDelay_ms>
						   sevenSegDisable(SEG_1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 a9 01 	call	0x352	; 0x352 <sevenSegDisable>
 1a4:	21 97       	sbiw	r28, 0x01	; 1
	 {
		  for(i=0;i<10;i++) 
		  {
				for(j=0;j<10;j++) 
				{
					 for (z=0;z<5;z++)
 1a6:	f1 f6       	brne	.-68     	; 0x164 <main+0x10>
    /* Replace with your application code */
    while (1)
	 {
		  for(i=0;i<10;i++) 
		  {
				for(j=0;j<10;j++) 
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
 1aa:	1a 30       	cpi	r17, 0x0A	; 10
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <main+0x60>
#include "registers.h"
#include "sevenSeg.h"
#include "softwareDelay.h"

int main(void)
{
 1ae:	c5 e0       	ldi	r28, 0x05	; 5
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	d8 cf       	rjmp	.-80     	; 0x164 <main+0x10>
	 uint8_t i,j;
	 uint16_t z;
    /* Replace with your application code */
    while (1)
	 {
		  for(i=0;i<10;i++) 
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	0a 30       	cpi	r16, 0x0A	; 10
 1b8:	99 f2       	breq	.-90     	; 0x160 <main+0xc>
#include "registers.h"
#include "sevenSeg.h"
#include "softwareDelay.h"

int main(void)
{
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	f8 cf       	rjmp	.-16     	; 0x1ae <main+0x5a>

000001be <sevenSegInit>:

#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
	switch (a_segment_id)
 1be:	88 23       	and	r24, r24
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <sevenSegInit+0xa>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <sevenSegInit+0x2a>
 1c6:	08 95       	ret
	{
		case SEG_0:
		{
			gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);  //set data bits direction as output
 1c8:	4f ef       	ldi	r20, 0xFF	; 255
 1ca:	6f e0       	ldi	r22, 0x0F	; 15
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
		   gpioPinDirection(SEG_EN1_GPIO,SEG_EN1_BIT,OUTPUT);   //set enable bit direction as output
 1d2:	4f ef       	ldi	r20, 0xFF	; 255
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
			gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	6f e0       	ldi	r22, 0x0F	; 15
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
			break;
 1e6:	08 95       	ret
		}
		case SEG_1:
		{
			gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);  //set data bits direction as output
 1e8:	4f ef       	ldi	r20, 0xFF	; 255
 1ea:	6f e0       	ldi	r22, 0x0F	; 15
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
			gpioPinDirection(SEG_EN2_GPIO,SEG_EN2_BIT,OUTPUT);   //set enable bit direction as output
 1f2:	4f ef       	ldi	r20, 0xFF	; 255
 1f4:	68 e0       	ldi	r22, 0x08	; 8
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
			gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,LOW);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	6f e0       	ldi	r22, 0x0F	; 15
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 206:	08 95       	ret

00000208 <sevenSegWrite>:
	
}

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
	switch( en_segment_id)
 208:	88 23       	and	r24, r24
 20a:	21 f0       	breq	.+8      	; 0x214 <sevenSegWrite+0xc>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	09 f4       	brne	.+2      	; 0x212 <sevenSegWrite+0xa>
 210:	48 c0       	rjmp	.+144    	; 0x2a2 <sevenSegWrite+0x9a>
 212:	08 95       	ret
	{
		case SEG_0:
		{
			switch (u8_number)
 214:	86 2f       	mov	r24, r22
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	91 05       	cpc	r25, r1
 21c:	08 f0       	brcs	.+2      	; 0x220 <sevenSegWrite+0x18>
 21e:	87 c0       	rjmp	.+270    	; 0x32e <sevenSegWrite+0x126>
 220:	fc 01       	movw	r30, r24
 222:	e6 5d       	subi	r30, 0xD6	; 214
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__tablejump2__>
			{
				case 0: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,LOW); break;
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	6f e0       	ldi	r22, 0x0F	; 15
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 234:	08 95       	ret
				case 1: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,1); break;
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	6f e0       	ldi	r22, 0x0F	; 15
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 240:	08 95       	ret
				case 2: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,2); break;
 242:	42 e0       	ldi	r20, 0x02	; 2
 244:	6f e0       	ldi	r22, 0x0F	; 15
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 24c:	08 95       	ret
				case 3: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,3); break;
 24e:	43 e0       	ldi	r20, 0x03	; 3
 250:	6f e0       	ldi	r22, 0x0F	; 15
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 258:	08 95       	ret
				case 4: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,4); break;
 25a:	44 e0       	ldi	r20, 0x04	; 4
 25c:	6f e0       	ldi	r22, 0x0F	; 15
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 264:	08 95       	ret
				case 5: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,5); break;
 266:	45 e0       	ldi	r20, 0x05	; 5
 268:	6f e0       	ldi	r22, 0x0F	; 15
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 270:	08 95       	ret
				case 6: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,6); break;
 272:	46 e0       	ldi	r20, 0x06	; 6
 274:	6f e0       	ldi	r22, 0x0F	; 15
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 27c:	08 95       	ret
				case 7: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,7); break;
 27e:	47 e0       	ldi	r20, 0x07	; 7
 280:	6f e0       	ldi	r22, 0x0F	; 15
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 288:	08 95       	ret
				case 8: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,8); break;
 28a:	48 e0       	ldi	r20, 0x08	; 8
 28c:	6f e0       	ldi	r22, 0x0F	; 15
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 294:	08 95       	ret
				case 9: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,9); break;
 296:	49 e0       	ldi	r20, 0x09	; 9
 298:	6f e0       	ldi	r22, 0x0F	; 15
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2a0:	08 95       	ret
			}
			break;
		}
		case SEG_1:
		{
			switch (u8_number)
 2a2:	86 2f       	mov	r24, r22
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	8a 30       	cpi	r24, 0x0A	; 10
 2a8:	91 05       	cpc	r25, r1
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <sevenSegWrite+0xa6>
 2ac:	40 c0       	rjmp	.+128    	; 0x32e <sevenSegWrite+0x126>
 2ae:	fc 01       	movw	r30, r24
 2b0:	ec 5c       	subi	r30, 0xCC	; 204
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__tablejump2__>
			{
				case 0: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,LOW); break;
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	6f e0       	ldi	r22, 0x0F	; 15
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2c2:	08 95       	ret
				case 1: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,1); break;
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	6f e0       	ldi	r22, 0x0F	; 15
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2ce:	08 95       	ret
				case 2: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,2); break;
 2d0:	42 e0       	ldi	r20, 0x02	; 2
 2d2:	6f e0       	ldi	r22, 0x0F	; 15
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2da:	08 95       	ret
				case 3: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,3); break;
 2dc:	43 e0       	ldi	r20, 0x03	; 3
 2de:	6f e0       	ldi	r22, 0x0F	; 15
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2e6:	08 95       	ret
				case 4: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,4); break;
 2e8:	44 e0       	ldi	r20, 0x04	; 4
 2ea:	6f e0       	ldi	r22, 0x0F	; 15
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2f2:	08 95       	ret
				case 5: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,5); break;
 2f4:	45 e0       	ldi	r20, 0x05	; 5
 2f6:	6f e0       	ldi	r22, 0x0F	; 15
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 2fe:	08 95       	ret
				case 6: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,6); break;
 300:	46 e0       	ldi	r20, 0x06	; 6
 302:	6f e0       	ldi	r22, 0x0F	; 15
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 30a:	08 95       	ret
				case 7: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,7); break;
 30c:	47 e0       	ldi	r20, 0x07	; 7
 30e:	6f e0       	ldi	r22, 0x0F	; 15
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 316:	08 95       	ret
				case 8: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,8); break;
 318:	48 e0       	ldi	r20, 0x08	; 8
 31a:	6f e0       	ldi	r22, 0x0F	; 15
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 322:	08 95       	ret
				case 9: gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,9); break;
 324:	49 e0       	ldi	r20, 0x09	; 9
 326:	6f e0       	ldi	r22, 0x0F	; 15
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 32e:	08 95       	ret

00000330 <sevenSegEnable>:
}
/* This Function is implemented to enable the REquired 7-Segment*/
/* By writing High to the SEG_ENx_BIT*/
void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
	switch (en_segment_id)
 330:	88 23       	and	r24, r24
 332:	19 f0       	breq	.+6      	; 0x33a <sevenSegEnable+0xa>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	39 f0       	breq	.+14     	; 0x346 <sevenSegEnable+0x16>
 338:	08 95       	ret
	{
		case SEG_0:
		{
			gpioPinWrite(SEG_EN1_GPIO,SEG_EN1_BIT,HIGH);
 33a:	4f ef       	ldi	r20, 0xFF	; 255
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
			break;
 344:	08 95       	ret
		
		}
		case SEG_1:
		{
			gpioPinWrite(SEG_EN2_GPIO,SEG_EN2_BIT,HIGH);
 346:	4f ef       	ldi	r20, 0xFF	; 255
 348:	68 e0       	ldi	r22, 0x08	; 8
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 350:	08 95       	ret

00000352 <sevenSegDisable>:

/* This Function is implemented to disable the Required 7-Segment*/
/* By writing low to the SEG_ENx_BIT*/
void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
	switch (en_segment_id)
 352:	88 23       	and	r24, r24
 354:	19 f0       	breq	.+6      	; 0x35c <sevenSegDisable+0xa>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	39 f0       	breq	.+14     	; 0x368 <sevenSegDisable+0x16>
 35a:	08 95       	ret
	{
		case SEG_0:
		{
			gpioPinWrite(SEG_EN1_GPIO,SEG_EN1_BIT,LOW);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
			break;
 366:	08 95       	ret
			
		}
		case SEG_1:
		{
			gpioPinWrite(SEG_EN2_GPIO,SEG_EN2_BIT,LOW);
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	68 e0       	ldi	r22, 0x08	; 8
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 82 00 	call	0x104	; 0x104 <gpioPinWrite>
 372:	08 95       	ret

00000374 <SwDelay_ms>:
 *  Author: A_ayman
 */ 
#include "softwareDelay.h"

void SwDelay_ms(uint32_t n)
{
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	00 d0       	rcall	.+0      	; 0x382 <SwDelay_ms+0xe>
 382:	00 d0       	rcall	.+0      	; 0x384 <SwDelay_ms+0x10>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	6b 01       	movw	r12, r22
 38a:	7c 01       	movw	r14, r24
	/*  for each n delay it will give you n ms */
   /* the value of internal_iteration_NO may be less than or greater than the value i choose */
	/* because of the context switching between functions and how much time does it take. */
	/*
	/*/
	volatile uint32_t z=0;
 38c:	19 82       	std	Y+1, r1	; 0x01
 38e:	1a 82       	std	Y+2, r1	; 0x02
 390:	1b 82       	std	Y+3, r1	; 0x03
 392:	1c 82       	std	Y+4, r1	; 0x04
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 394:	67 2b       	or	r22, r23
 396:	68 2b       	or	r22, r24
 398:	69 2b       	or	r22, r25
 39a:	c9 f4       	brne	.+50     	; 0x3ce <SwDelay_ms+0x5a>
 39c:	1e c0       	rjmp	.+60     	; 0x3da <SwDelay_ms+0x66>
	{
		for( j=0; j<internal_iteration_NO;j++) //the number of internal iteration related to the kindd of the command and how many cycles does it take.
		{
			z++; //it can be any instruction Just for not making the compiler ignore the loop.
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	ab 81       	ldd	r26, Y+3	; 0x03
 3a4:	bc 81       	ldd	r27, Y+4	; 0x04
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	a1 1d       	adc	r26, r1
 3aa:	b1 1d       	adc	r27, r1
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	ab 83       	std	Y+3, r26	; 0x03
 3b2:	bc 83       	std	Y+4, r27	; 0x04
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	31 09       	sbc	r19, r1
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
	{
		for( j=0; j<internal_iteration_NO;j++) //the number of internal iteration related to the kindd of the command and how many cycles does it take.
 3b8:	91 f7       	brne	.-28     	; 0x39e <SwDelay_ms+0x2a>
	/*/
	volatile uint32_t z=0;
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 3ba:	4f 5f       	subi	r20, 0xFF	; 255
 3bc:	5f 4f       	sbci	r21, 0xFF	; 255
 3be:	6f 4f       	sbci	r22, 0xFF	; 255
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	c4 16       	cp	r12, r20
 3c4:	d5 06       	cpc	r13, r21
 3c6:	e6 06       	cpc	r14, r22
 3c8:	f7 06       	cpc	r15, r23
 3ca:	21 f4       	brne	.+8      	; 0x3d4 <SwDelay_ms+0x60>
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <SwDelay_ms+0x66>
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	ba 01       	movw	r22, r20
 *  Author: A_ayman
 */ 
#include "softwareDelay.h"

void SwDelay_ms(uint32_t n)
{
 3d4:	29 e4       	ldi	r18, 0x49	; 73
 3d6:	31 e0       	ldi	r19, 0x01	; 1
 3d8:	e2 cf       	rjmp	.-60     	; 0x39e <SwDelay_ms+0x2a>
		{
			z++; //it can be any instruction Just for not making the compiler ignore the loop.
			
		}	
	}
}
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	08 95       	ret

000003f0 <__tablejump2__>:
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	05 90       	lpm	r0, Z+
 3f6:	f4 91       	lpm	r31, Z
 3f8:	e0 2d       	mov	r30, r0
 3fa:	09 94       	ijmp

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
