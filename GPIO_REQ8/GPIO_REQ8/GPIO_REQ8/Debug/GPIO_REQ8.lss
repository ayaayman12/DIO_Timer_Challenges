
GPIO_REQ8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000546  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001316  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000853  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082b  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000553  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c18  00000000  00000000  0000317f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 11 01 	call	0x222	; 0x222 <main>
  64:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gpioPinDirection>:
	switch(u8_port)
	{
		case GPIOA: PORTA_DATA ^= u8_pins;break;
		case GPIOB: PORTB_DATA ^= u8_pins;break;
		case GPIOC: PORTC_DATA ^= u8_pins;break;
		case GPIOD: PORTD_DATA ^= u8_pins;break;
  6c:	41 11       	cpse	r20, r1
  6e:	1c c0       	rjmp	.+56     	; 0xa8 <gpioPinDirection+0x3c>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	59 f0       	breq	.+22     	; 0x8a <gpioPinDirection+0x1e>
  74:	28 f0       	brcs	.+10     	; 0x80 <gpioPinDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	69 f0       	breq	.+26     	; 0x94 <gpioPinDirection+0x28>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	81 f0       	breq	.+32     	; 0x9e <gpioPinDirection+0x32>
  7e:	08 95       	ret
  80:	8a b3       	in	r24, 0x1a	; 26
  82:	60 95       	com	r22
  84:	68 23       	and	r22, r24
  86:	6a bb       	out	0x1a, r22	; 26
  88:	08 95       	ret
  8a:	87 b3       	in	r24, 0x17	; 23
  8c:	60 95       	com	r22
  8e:	68 23       	and	r22, r24
  90:	67 bb       	out	0x17, r22	; 23
  92:	08 95       	ret
  94:	84 b3       	in	r24, 0x14	; 20
  96:	60 95       	com	r22
  98:	68 23       	and	r22, r24
  9a:	64 bb       	out	0x14, r22	; 20
  9c:	08 95       	ret
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	60 95       	com	r22
  a2:	68 23       	and	r22, r24
  a4:	61 bb       	out	0x11, r22	; 17
  a6:	08 95       	ret
  a8:	4f 3f       	cpi	r20, 0xFF	; 255
  aa:	b9 f4       	brne	.+46     	; 0xda <gpioPinDirection+0x6e>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	51 f0       	breq	.+20     	; 0xc4 <gpioPinDirection+0x58>
  b0:	28 f0       	brcs	.+10     	; 0xbc <gpioPinDirection+0x50>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	59 f0       	breq	.+22     	; 0xcc <gpioPinDirection+0x60>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	69 f0       	breq	.+26     	; 0xd4 <gpioPinDirection+0x68>
  ba:	08 95       	ret
  bc:	8a b3       	in	r24, 0x1a	; 26
  be:	68 2b       	or	r22, r24
  c0:	6a bb       	out	0x1a, r22	; 26
  c2:	08 95       	ret
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	68 2b       	or	r22, r24
  c8:	67 bb       	out	0x17, r22	; 23
  ca:	08 95       	ret
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	68 2b       	or	r22, r24
  d0:	64 bb       	out	0x14, r22	; 20
  d2:	08 95       	ret
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	68 2b       	or	r22, r24
  d8:	61 bb       	out	0x11, r22	; 17
  da:	08 95       	ret

000000dc <gpioPinWrite>:
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	71 f0       	breq	.+28     	; 0xfc <gpioPinWrite+0x20>
  e0:	28 f0       	brcs	.+10     	; 0xec <gpioPinWrite+0x10>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	99 f0       	breq	.+38     	; 0x10c <gpioPinWrite+0x30>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	c9 f0       	breq	.+50     	; 0x11c <gpioPinWrite+0x40>
  ea:	08 95       	ret
  ec:	8b b3       	in	r24, 0x1b	; 27
  ee:	96 2f       	mov	r25, r22
  f0:	90 95       	com	r25
  f2:	89 23       	and	r24, r25
  f4:	46 23       	and	r20, r22
  f6:	48 2b       	or	r20, r24
  f8:	4b bb       	out	0x1b, r20	; 27
  fa:	08 95       	ret
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	96 2f       	mov	r25, r22
 100:	90 95       	com	r25
 102:	89 23       	and	r24, r25
 104:	46 23       	and	r20, r22
 106:	48 2b       	or	r20, r24
 108:	48 bb       	out	0x18, r20	; 24
 10a:	08 95       	ret
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	96 2f       	mov	r25, r22
 110:	90 95       	com	r25
 112:	89 23       	and	r24, r25
 114:	46 23       	and	r20, r22
 116:	48 2b       	or	r20, r24
 118:	45 bb       	out	0x15, r20	; 21
 11a:	08 95       	ret
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	96 2f       	mov	r25, r22
 120:	90 95       	com	r25
 122:	89 23       	and	r24, r25
 124:	46 23       	and	r20, r22
 126:	48 2b       	or	r20, r24
 128:	42 bb       	out	0x12, r20	; 18
 12a:	08 95       	ret

0000012c <gpioPinRead>:
/* When you anding PORTx PIN value withe the required Pin to read it returns either 0 or pin number*/
/* we consider 0 as Low and any other value as High*/
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=-1;
	switch(u8_port)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	49 f0       	breq	.+18     	; 0x142 <gpioPinRead+0x16>
 130:	28 f0       	brcs	.+10     	; 0x13c <gpioPinRead+0x10>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	49 f0       	breq	.+18     	; 0x148 <gpioPinRead+0x1c>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	51 f0       	breq	.+20     	; 0x14e <gpioPinRead+0x22>
 13a:	0c c0       	rjmp	.+24     	; 0x154 <gpioPinRead+0x28>
	{
		case GPIOA: u8_pin_value = (PORTA_PIN & u8_pin);break;
 13c:	89 b3       	in	r24, 0x19	; 25
 13e:	68 23       	and	r22, r24
 140:	0a c0       	rjmp	.+20     	; 0x156 <gpioPinRead+0x2a>
		case GPIOB: u8_pin_value = (PORTB_PIN & u8_pin);break;
 142:	86 b3       	in	r24, 0x16	; 22
 144:	68 23       	and	r22, r24
 146:	07 c0       	rjmp	.+14     	; 0x156 <gpioPinRead+0x2a>
		case GPIOC: u8_pin_value = (PORTC_PIN & u8_pin);break;
 148:	83 b3       	in	r24, 0x13	; 19
 14a:	68 23       	and	r22, r24
 14c:	04 c0       	rjmp	.+8      	; 0x156 <gpioPinRead+0x2a>
		case GPIOD: u8_pin_value = (PORTD_PIN & u8_pin);break;
 14e:	80 b3       	in	r24, 0x10	; 16
 150:	68 23       	and	r22, r24
 152:	01 c0       	rjmp	.+2      	; 0x156 <gpioPinRead+0x2a>

/* When you anding PORTx PIN value withe the required Pin to read it returns either 0 or pin number*/
/* we consider 0 as Low and any other value as High*/
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=-1;
 154:	6f ef       	ldi	r22, 0xFF	; 255
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	61 11       	cpse	r22, r1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <gpioPinRead+0x32>
 15c:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(u8_pin_value == 0)
		return LOW;
	else
		return HIGH;
}
 15e:	81 95       	neg	r24
 160:	08 95       	ret

00000162 <Led_Init>:
#include "gpio.h"
/* This function is used to configure the direction of the led Pins as OUTPUT*/
/* Based on gpioPinDirection function */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	61 f0       	breq	.+24     	; 0x17e <Led_Init+0x1c>
 166:	28 f0       	brcs	.+10     	; 0x172 <Led_Init+0x10>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	79 f0       	breq	.+30     	; 0x18a <Led_Init+0x28>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	99 f0       	breq	.+38     	; 0x196 <Led_Init+0x34>
 170:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 172:	4f ef       	ldi	r20, 0xFF	; 255
 174:	60 e1       	ldi	r22, 0x10	; 16
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 17c:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 17e:	4f ef       	ldi	r20, 0xFF	; 255
 180:	60 e2       	ldi	r22, 0x20	; 32
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 188:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 18a:	4f ef       	ldi	r20, 0xFF	; 255
 18c:	60 e4       	ldi	r22, 0x40	; 64
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 194:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 196:	4f ef       	ldi	r20, 0xFF	; 255
 198:	60 e8       	ldi	r22, 0x80	; 128
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
 1a0:	08 95       	ret

000001a2 <Led_On>:

/* This function is implemented to choose which led we want to turn on by sending its number*/
/* Based on gpioPinwrite function with HIGH value*/
void Led_On(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	61 f0       	breq	.+24     	; 0x1be <Led_On+0x1c>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <Led_On+0x10>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	79 f0       	breq	.+30     	; 0x1ca <Led_On+0x28>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	99 f0       	breq	.+38     	; 0x1d6 <Led_On+0x34>
 1b0:	08 95       	ret
	{
		case LED_0:
		{
			 gpioPinWrite(LED_0_GPIO,LED_0_BIT, HIGH);
 1b2:	4f ef       	ldi	r20, 0xFF	; 255
 1b4:	60 e1       	ldi	r22, 0x10	; 16
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 1bc:	08 95       	ret
		}
		case LED_1:
		{
			 gpioPinWrite(LED_1_GPIO,LED_1_BIT, HIGH);
 1be:	4f ef       	ldi	r20, 0xFF	; 255
 1c0:	60 e2       	ldi	r22, 0x20	; 32
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 1c8:	08 95       	ret
		}
		case LED_2:
		{
			 gpioPinWrite(LED_2_GPIO,LED_2_BIT, HIGH);
 1ca:	4f ef       	ldi	r20, 0xFF	; 255
 1cc:	60 e4       	ldi	r22, 0x40	; 64
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 1d4:	08 95       	ret
		}
		case LED_3:
		{
			 gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 1d6:	4f ef       	ldi	r20, 0xFF	; 255
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
 1e0:	08 95       	ret

000001e2 <Led_Off>:

/* This function is implemented to choose which led we want to turn off by sending its number*/
/* Based on gpioPinwrite function with LAW value*/
void Led_Off(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	61 f0       	breq	.+24     	; 0x1fe <Led_Off+0x1c>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <Led_Off+0x10>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	79 f0       	breq	.+30     	; 0x20a <Led_Off+0x28>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	99 f0       	breq	.+38     	; 0x216 <Led_Off+0x34>
 1f0:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinWrite(LED_0_GPIO,LED_0_BIT, LOW);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	60 e1       	ldi	r22, 0x10	; 16
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 1fc:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinWrite(LED_1_GPIO,LED_1_BIT, LOW);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	60 e2       	ldi	r22, 0x20	; 32
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 208:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinWrite(LED_2_GPIO,LED_2_BIT, LOW);
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	60 e4       	ldi	r22, 0x40	; 64
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 214:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	60 e8       	ldi	r22, 0x80	; 128
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
 220:	08 95       	ret

00000222 <main>:

int main(void)
{
	uint8_t BTN_status;
	uint8_t count=1;
	Led_Init(LED_0);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 b1 00 	call	0x162	; 0x162 <Led_Init>
	pushButtonInit(BTN_0);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 66 01 	call	0x2cc	; 0x2cc <pushButtonInit>


int main(void)
{
	uint8_t BTN_status;
	uint8_t count=1;
 22e:	c1 e0       	ldi	r28, 0x01	; 1
	pushButtonInit(BTN_0);
    /* Replace with your application code */
	
    while (1) 
    {
		BTN_status=pushButtonGetStatus(BTN_0);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 9a 01 	call	0x334	; 0x334 <pushButtonGetStatus>
		if (BTN_status==Pressed)
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	09 f0       	breq	.+2      	; 0x23c <main+0x1a>
 23a:	44 c0       	rjmp	.+136    	; 0x2c4 <main+0xa2>
		{
			count++;
 23c:	cf 5f       	subi	r28, 0xFF	; 255
			while (count!=0)
 23e:	c1 f3       	breq	.-16     	; 0x230 <main+0xe>
			{
				count--;
				
				Led_On(LED_0);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Led_On>
				SwDelay_ms(170);
 246:	6a ea       	ldi	r22, 0xAA	; 170
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				BTN_status=pushButtonGetStatus(BTN_0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 9a 01 	call	0x334	; 0x334 <pushButtonGetStatus>
				if (BTN_status==Pressed)
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	09 f0       	breq	.+2      	; 0x25e <main+0x3c>
		if (BTN_status==Pressed)
		{
			count++;
			while (count!=0)
			{
				count--;
 25c:	c1 50       	subi	r28, 0x01	; 1
				BTN_status=pushButtonGetStatus(BTN_0);
				if (BTN_status==Pressed)
				{
					count++;
				}
				SwDelay_ms(170);
 25e:	6a ea       	ldi	r22, 0xAA	; 170
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				BTN_status=pushButtonGetStatus(BTN_0);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 9a 01 	call	0x334	; 0x334 <pushButtonGetStatus>
				if (BTN_status==Pressed)
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	09 f4       	brne	.+2      	; 0x276 <main+0x54>
				{
					count++;
 274:	cf 5f       	subi	r28, 0xFF	; 255
				}
				SwDelay_ms(170);
 276:	6a ea       	ldi	r22, 0xAA	; 170
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				BTN_status=pushButtonGetStatus(BTN_0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 9a 01 	call	0x334	; 0x334 <pushButtonGetStatus>
				if (BTN_status==Pressed)
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	09 f4       	brne	.+2      	; 0x28e <main+0x6c>
				{
					count++;
 28c:	cf 5f       	subi	r28, 0xFF	; 255
				}
				SwDelay_ms(170);
 28e:	6a ea       	ldi	r22, 0xAA	; 170
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				BTN_status=pushButtonGetStatus(BTN_0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 9a 01 	call	0x334	; 0x334 <pushButtonGetStatus>
				if (BTN_status==Pressed)
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <main+0x84>
				{
					count++;
 2a4:	cf 5f       	subi	r28, 0xFF	; 255
				}
				SwDelay_ms(170);
 2a6:	6a ea       	ldi	r22, 0xAA	; 170
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				BTN_status=pushButtonGetStatus(BTN_0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 9a 01 	call	0x334	; 0x334 <pushButtonGetStatus>
				if (BTN_status==Pressed)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	09 f4       	brne	.+2      	; 0x2be <main+0x9c>
				{
					count++;
 2bc:	cf 5f       	subi	r28, 0xFF	; 255
    {
		BTN_status=pushButtonGetStatus(BTN_0);
		if (BTN_status==Pressed)
		{
			count++;
			while (count!=0)
 2be:	c1 11       	cpse	r28, r1
 2c0:	bf cf       	rjmp	.-130    	; 0x240 <main+0x1e>
 2c2:	b6 cf       	rjmp	.-148    	; 0x230 <main+0xe>
			}
			
		}
		else
		{
			Led_Off(LED_0);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Led_Off>
 2ca:	b2 cf       	rjmp	.-156    	; 0x230 <main+0xe>

000002cc <pushButtonInit>:

#include "pushButton.h"
/* This function is implemented to configure pushButton Pins as INPUT*/
void pushButtonInit(En_buttonId_t en_butotn_id)
{
	switch (en_butotn_id)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	89 f0       	breq	.+34     	; 0x2f2 <pushButtonInit+0x26>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <pushButtonInit+0x10>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	c9 f0       	breq	.+50     	; 0x308 <pushButtonInit+0x3c>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	11 f1       	breq	.+68     	; 0x31e <pushButtonInit+0x52>
 2da:	08 95       	ret
	{
		case BTN_0:
		{
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT,INPUT);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	60 e1       	ldi	r22, 0x10	; 16
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			gpioPinWrite(BTN_0_GPIO, BTN_0_BIT,HIGH);     // to activate internal pull up resistor 
 2e6:	4f ef       	ldi	r20, 0xFF	; 255
 2e8:	60 e1       	ldi	r22, 0x10	; 16
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 2f0:	08 95       	ret
		}
		case BTN_1:
		{
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			gpioPinWrite(BTN_1_GPIO, BTN_1_BIT,HIGH);     // to activate internal pull up resistor 
 2fc:	4f ef       	ldi	r20, 0xFF	; 255
 2fe:	64 e0       	ldi	r22, 0x04	; 4
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			break;
 306:	08 95       	ret
		}
		case BTN_2:
		{
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			gpioPinWrite(BTN_2_GPIO, BTN_2_BIT,HIGH);     // to activate internal pull up resistor 
 312:	4f ef       	ldi	r20, 0xFF	; 255
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
			
			break;
 31c:	08 95       	ret
		}
		case BTN_3:
		{
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	68 e0       	ldi	r22, 0x08	; 8
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			gpioPinWrite(BTN_3_GPIO, BTN_3_BIT,HIGH);     // to activate internal pull up resistor 
 328:	4f ef       	ldi	r20, 0xFF	; 255
 32a:	68 e0       	ldi	r22, 0x08	; 8
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 6e 00 	call	0xdc	; 0xdc <gpioPinWrite>
 332:	08 95       	ret

00000334 <pushButtonGetStatus>:
		break;
	}
}

 En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	1f 92       	push	r1
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t buttonStatus=-1;
	volatile uint8_t pin_read;

	switch (en_butotn_id)
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	91 f1       	breq	.+100    	; 0x3a6 <pushButtonGetStatus+0x72>
 342:	38 f0       	brcs	.+14     	; 0x352 <pushButtonGetStatus+0x1e>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	09 f4       	brne	.+2      	; 0x34a <pushButtonGetStatus+0x16>
 348:	58 c0       	rjmp	.+176    	; 0x3fa <pushButtonGetStatus+0xc6>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	09 f4       	brne	.+2      	; 0x350 <pushButtonGetStatus+0x1c>
 34e:	7e c0       	rjmp	.+252    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 350:	a5 c0       	rjmp	.+330    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	{
		case BTN_0:
		{
			pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 352:	60 e1       	ldi	r22, 0x10	; 16
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 35a:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==LOW)
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	81 11       	cpse	r24, r1
 360:	11 c0       	rjmp	.+34     	; 0x384 <pushButtonGetStatus+0x50>
			{
				SwDelay_ms(30);
 362:	6e e1       	ldi	r22, 0x1E	; 30
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 36e:	60 e1       	ldi	r22, 0x10	; 16
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 376:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==LOW)
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	88 23       	and	r24, r24
 37c:	09 f4       	brne	.+2      	; 0x380 <pushButtonGetStatus+0x4c>
 37e:	90 c0       	rjmp	.+288    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				{
					buttonStatus= Pressed;
				}
				else
				{
					buttonStatus= Released;
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	9d c0       	rjmp	.+314    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}
			}
			else
			{
				SwDelay_ms(30);
 384:	6e e1       	ldi	r22, 0x1E	; 30
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 390:	60 e1       	ldi	r22, 0x10	; 16
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 398:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==LOW)
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	88 23       	and	r24, r24
 39e:	09 f4       	brne	.+2      	; 0x3a2 <pushButtonGetStatus+0x6e>
 3a0:	81 c0       	rjmp	.+258    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	8c c0       	rjmp	.+280    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			break;
		}
	
		case BTN_1:
		{
			pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 3ae:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==0)
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	81 11       	cpse	r24, r1
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <pushButtonGetStatus+0xa4>
			{
				SwDelay_ms(30);
 3b6:	6e e1       	ldi	r22, 0x1E	; 30
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 3ca:	89 83       	std	Y+1, r24	; 0x01
			
				if (pin_read==0)
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	88 23       	and	r24, r24
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <pushButtonGetStatus+0xa0>
 3d2:	6a c0       	rjmp	.+212    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	73 c0       	rjmp	.+230    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}
			}
			else
			{
				SwDelay_ms(30);
 3d8:	6e e1       	ldi	r22, 0x1E	; 30
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 3e4:	64 e0       	ldi	r22, 0x04	; 4
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 3ec:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==0)
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 23       	and	r24, r24
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <pushButtonGetStatus+0xc2>
 3f4:	5b c0       	rjmp	.+182    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	62 c0       	rjmp	.+196    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			}
			break;
		}
		case BTN_2:
		{
			pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 3fa:	64 e0       	ldi	r22, 0x04	; 4
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 402:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==0)
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	81 11       	cpse	r24, r1
 408:	11 c0       	rjmp	.+34     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			{
				SwDelay_ms(30);
 40a:	6e e1       	ldi	r22, 0x1E	; 30
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 416:	64 e0       	ldi	r22, 0x04	; 4
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 41e:	89 83       	std	Y+1, r24	; 0x01
			
				if (pin_read==0)
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	88 23       	and	r24, r24
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	44 c0       	rjmp	.+136    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	49 c0       	rjmp	.+146    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}
			}
			else
			{
				SwDelay_ms(30);
 42c:	6e e1       	ldi	r22, 0x1E	; 30
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 438:	64 e0       	ldi	r22, 0x04	; 4
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 440:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==0)
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 23       	and	r24, r24
 446:	b1 f1       	breq	.+108    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	39 c0       	rjmp	.+114    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			}
			break;
		}
		case BTN_3:
		{
			pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 44c:	68 e0       	ldi	r22, 0x08	; 8
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 454:	89 83       	std	Y+1, r24	; 0x01
			if (pin_read==0)
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	81 11       	cpse	r24, r1
 45a:	10 c0       	rjmp	.+32     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			{
				SwDelay_ms(30);
 45c:	6e e1       	ldi	r22, 0x1E	; 30
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 468:	68 e0       	ldi	r22, 0x08	; 8
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 470:	89 83       	std	Y+1, r24	; 0x01
			
				if (pin_read==0)
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 23       	and	r24, r24
 476:	01 f1       	breq	.+64     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
					buttonStatus= Pressed;
				
				}
				else
				{
					buttonStatus= Released;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	21 c0       	rjmp	.+66     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}
			}
			else
			{
				SwDelay_ms(30);
 47c:	6e e1       	ldi	r22, 0x1E	; 30
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SwDelay_ms>
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 488:	68 e0       	ldi	r22, 0x08	; 8
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 96 00 	call	0x12c	; 0x12c <gpioPinRead>
 490:	89 83       	std	Y+1, r24	; 0x01
				if (pin_read==0)
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 23       	and	r24, r24
 496:	91 f0       	breq	.+36     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				{
					buttonStatus= Pressed;
				}
				else
				{
					buttonStatus= Released;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	11 c0       	rjmp	.+34     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
}

 En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	
	uint8_t buttonStatus=-1;
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	0f c0       	rjmp	.+30     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
				if (pin_read==LOW)
				{
					buttonStatus= Pressed;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
				if (pin_read==LOW)
				{
					buttonStatus= Pressed;
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
			
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	09 c0       	rjmp	.+18     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
			
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
			
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				SwDelay_ms(30);
				pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 4bc:	82 e0       	ldi	r24, 0x02	; 2
		default :
		break;
	}
	return buttonStatus;

}
 4be:	0f 90       	pop	r0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <SwDelay_ms>:
 *  Author: A_ayman
 */ 
#include "softwareDelay.h"

void SwDelay_ms(uint32_t n)
{
 4c6:	cf 92       	push	r12
 4c8:	df 92       	push	r13
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <SwDelay_ms+0xe>
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <SwDelay_ms+0x10>
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	6b 01       	movw	r12, r22
 4dc:	7c 01       	movw	r14, r24
	/*  for each n delay it will give you n ms */
   /* the value of internal_iteration_NO may be less than or greater than the value i choose */
	/* because of the context switching between functions and how much time does it take. */
	/*
	/*/
	volatile uint32_t z=0;
 4de:	19 82       	std	Y+1, r1	; 0x01
 4e0:	1a 82       	std	Y+2, r1	; 0x02
 4e2:	1b 82       	std	Y+3, r1	; 0x03
 4e4:	1c 82       	std	Y+4, r1	; 0x04
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 4e6:	67 2b       	or	r22, r23
 4e8:	68 2b       	or	r22, r24
 4ea:	69 2b       	or	r22, r25
 4ec:	c9 f4       	brne	.+50     	; 0x520 <SwDelay_ms+0x5a>
 4ee:	1e c0       	rjmp	.+60     	; 0x52c <SwDelay_ms+0x66>
	{
		for( j=0; j<internal_iteration_NO;j++) //the number of internal iteration related to the kindd of the command and how many cycles does it take.
		{
			z++; //it can be any instruction Just for not making the compiler ignore the loop.
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	9a 81       	ldd	r25, Y+2	; 0x02
 4f4:	ab 81       	ldd	r26, Y+3	; 0x03
 4f6:	bc 81       	ldd	r27, Y+4	; 0x04
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	a1 1d       	adc	r26, r1
 4fc:	b1 1d       	adc	r27, r1
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	9a 83       	std	Y+2, r25	; 0x02
 502:	ab 83       	std	Y+3, r26	; 0x03
 504:	bc 83       	std	Y+4, r27	; 0x04
 506:	21 50       	subi	r18, 0x01	; 1
 508:	31 09       	sbc	r19, r1
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
	{
		for( j=0; j<internal_iteration_NO;j++) //the number of internal iteration related to the kindd of the command and how many cycles does it take.
 50a:	91 f7       	brne	.-28     	; 0x4f0 <SwDelay_ms+0x2a>
	/*/
	volatile uint32_t z=0;
   uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 50c:	4f 5f       	subi	r20, 0xFF	; 255
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
 510:	6f 4f       	sbci	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	c4 16       	cp	r12, r20
 516:	d5 06       	cpc	r13, r21
 518:	e6 06       	cpc	r14, r22
 51a:	f7 06       	cpc	r15, r23
 51c:	21 f4       	brne	.+8      	; 0x526 <SwDelay_ms+0x60>
 51e:	06 c0       	rjmp	.+12     	; 0x52c <SwDelay_ms+0x66>
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	ba 01       	movw	r22, r20
 *  Author: A_ayman
 */ 
#include "softwareDelay.h"

void SwDelay_ms(uint32_t n)
{
 526:	29 e4       	ldi	r18, 0x49	; 73
 528:	31 e0       	ldi	r19, 0x01	; 1
 52a:	e2 cf       	rjmp	.-60     	; 0x4f0 <SwDelay_ms+0x2a>
		{
			z++; //it can be any instruction Just for not making the compiler ignore the loop.
			
		}	
	}
}
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
